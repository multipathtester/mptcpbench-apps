# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-12-30 23:17
from __future__ import unicode_literals

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import mptcpbench.collect.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('benches', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BenchTest',
            fields=[
                ('client_analysis', models.BooleanField(default=True)),
                ('client_version', models.CharField(max_length=200)),
                ('server_version', models.CharField(max_length=200)),
                ('start_time', models.DateTimeField(verbose_name='starting time')),
                ('uuid', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('bench', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='benches.Bench')),
            ],
        ),
        migrations.CreateModel(
            name='CellEnergy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lte_promotion_energy', models.FloatField()),
                ('lte_promotion_time', models.DurationField()),
                ('rrc_crx_energy', models.FloatField()),
                ('rrc_crx_time', models.DurationField()),
                ('rrc_idle_energy', models.FloatField()),
                ('rrc_idle_time', models.DurationField()),
                ('rrc_short_drx_energy', models.FloatField()),
                ('rrc_short_drx_time', models.DurationField()),
                ('rrc_long_drx_energy', models.FloatField()),
                ('rrc_long_drx_time', models.DurationField()),
                ('total_energy', models.FloatField()),
                ('total_time', models.DurationField()),
            ],
        ),
        migrations.CreateModel(
            name='Interface',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('is_active', models.BooleanField(default=False)),
                ('is_backup', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='IPAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
            ],
        ),
        migrations.CreateModel(
            name='Machine',
            fields=[
                ('host_os', models.CharField(max_length=200)),
                ('mptcp_version', models.CharField(max_length=200)),
                ('tag', models.CharField(max_length=200, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='NetcfgLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interface', models.CharField(max_length=16)),
                ('ip_address', models.CharField(max_length=43)),
                ('order', models.PositiveIntegerField()),
                ('timestamp', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='NoTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('uploader_email', models.EmailField(max_length=254)),
                ('bench', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='benches.Bench')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('run_time', models.DurationField()),
            ],
        ),
        migrations.CreateModel(
            name='SmartphoneTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('config_name', models.CharField(max_length=20)),
                ('device_id', models.CharField(max_length=36)),
                ('received_time', models.DateTimeField()),
                ('server_ip', models.GenericIPAddressField()),
                ('start_time', models.DateTimeField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Sysctl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('net_ipv4_tcp_autocorking', models.PositiveSmallIntegerField()),
                ('net_ipv4_tcp_congestion_control', models.CharField(max_length=16)),
                ('net_ipv4_tcp_dsack', models.PositiveSmallIntegerField()),
                ('net_ipv4_tcp_early_retrans', models.PositiveSmallIntegerField()),
                ('net_ipv4_tcp_fack', models.PositiveSmallIntegerField()),
                ('net_ipv4_tcp_fin_timeout', models.PositiveSmallIntegerField()),
                ('net_ipv4_tcp_frto', models.PositiveSmallIntegerField()),
                ('net_ipv4_tcp_keepalive_intvl', models.PositiveSmallIntegerField()),
                ('net_ipv4_tcp_keepalive_probes', models.PositiveSmallIntegerField()),
                ('net_ipv4_tcp_keepalive_time', models.PositiveIntegerField()),
                ('net_ipv4_tcp_limit_output_bytes', models.PositiveIntegerField()),
                ('net_ipv4_tcp_low_latency', models.PositiveSmallIntegerField()),
                ('net_ipv4_tcp_moderate_rcvbuf', models.PositiveSmallIntegerField()),
                ('net_ipv4_tcp_no_metrics_save', models.PositiveSmallIntegerField()),
                ('net_ipv4_tcp_probe_interval', models.PositiveIntegerField()),
                ('net_ipv4_tcp_probe_threshold', models.PositiveIntegerField()),
                ('net_ipv4_tcp_reordering', models.PositiveSmallIntegerField()),
                ('net_ipv4_tcp_retries1', models.PositiveSmallIntegerField()),
                ('net_ipv4_tcp_retries2', models.PositiveSmallIntegerField()),
                ('net_ipv4_tcp_rmem_min', models.PositiveIntegerField()),
                ('net_ipv4_tcp_rmem_default', models.PositiveIntegerField()),
                ('net_ipv4_tcp_rmem_max', models.PositiveIntegerField()),
                ('net_ipv4_tcp_slow_start_after_idle', models.PositiveSmallIntegerField()),
                ('net_ipv4_tcp_syn_retries', models.PositiveSmallIntegerField()),
                ('net_ipv4_tcp_synack_retries', models.PositiveSmallIntegerField()),
                ('net_ipv4_tcp_wmem_min', models.PositiveIntegerField()),
                ('net_ipv4_tcp_wmem_default', models.PositiveIntegerField()),
                ('net_ipv4_tcp_wmem_max', models.PositiveIntegerField()),
                ('net_mptcp_mptcp_binder_gateways', models.PositiveSmallIntegerField(default=0)),
                ('net_mptcp_mptcp_checksum', models.PositiveSmallIntegerField()),
                ('net_mptcp_mptcp_debug', models.PositiveSmallIntegerField()),
                ('net_mptcp_mptcp_enabled', models.PositiveSmallIntegerField()),
                ('net_mptcp_mptcp_path_manager', models.CharField(max_length=16)),
                ('net_mptcp_mptcp_scheduler', models.CharField(max_length=16)),
                ('net_mptcp_mptcp_syn_retries', models.PositiveSmallIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Trace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('user_name', models.CharField(max_length=200)),
                ('is_analyzed', models.BooleanField(default=False)),
                ('is_client_trace', models.BooleanField()),
                ('is_smartphone', models.BooleanField()),
                ('is_undefined', models.BooleanField()),
                ('file', models.FileField(max_length=200, upload_to=mptcpbench.collect.models.get_trace_path_from_trace)),
            ],
        ),
        migrations.CreateModel(
            name='ProtoInfo',
            fields=[
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('test', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='collect.SmartphoneTest')),
            ],
        ),
        migrations.CreateModel(
            name='SmartphoneTestGroup',
            fields=[
                ('start_time', models.DateTimeField()),
                ('test', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='collect.SmartphoneTest')),
            ],
        ),
        migrations.CreateModel(
            name='TraceAnalysisError',
            fields=[
                ('trace', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='collect.Trace')),
                ('error', models.CharField(max_length=2048)),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='trace',
            unique_together=set([('name', 'is_client_trace')]),
        ),
        migrations.AddField(
            model_name='smartphonetest',
            name='bench',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='benches.Bench'),
        ),
        migrations.AddField(
            model_name='smartphonetest',
            name='client_trace',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='smartphone_client_test', to='collect.Trace'),
        ),
        migrations.AddField(
            model_name='smartphonetest',
            name='result',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='collect.Result'),
        ),
        migrations.AddField(
            model_name='smartphonetest',
            name='server_trace',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='smartphone_server_test', to='collect.Trace'),
        ),
        migrations.AddField(
            model_name='notest',
            name='trace',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='test', to='collect.Trace'),
        ),
        migrations.AddField(
            model_name='netcfgline',
            name='result',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='collect.Result'),
        ),
        migrations.AddField(
            model_name='interface',
            name='ips',
            field=models.ManyToManyField(to='collect.IPAddress'),
        ),
        migrations.AddField(
            model_name='cellenergy',
            name='trace',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='collect.Trace'),
        ),
        migrations.AddField(
            model_name='benchtest',
            name='client_interfaces',
            field=models.ManyToManyField(related_name='client_tests', to='collect.Interface'),
        ),
        migrations.AddField(
            model_name='benchtest',
            name='client_machine',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='client_tests', to='collect.Machine'),
        ),
        migrations.AddField(
            model_name='benchtest',
            name='client_sysctl',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='client_tests', to='collect.Sysctl'),
        ),
        migrations.AddField(
            model_name='benchtest',
            name='client_trace',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='client_test', to='collect.Trace'),
        ),
        migrations.AddField(
            model_name='benchtest',
            name='result',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='collect.Result'),
        ),
        migrations.AddField(
            model_name='benchtest',
            name='server_interfaces',
            field=models.ManyToManyField(related_name='server_tests', to='collect.Interface'),
        ),
        migrations.AddField(
            model_name='benchtest',
            name='server_machine',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='server_tests', to='collect.Machine'),
        ),
        migrations.AddField(
            model_name='benchtest',
            name='server_sysctl',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='server_tests', to='collect.Sysctl'),
        ),
        migrations.AddField(
            model_name='benchtest',
            name='server_trace',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='server_test', to='collect.Trace'),
        ),
        migrations.AlterUniqueTogether(
            name='benchtest',
            unique_together=set([('client_machine', 'server_machine', 'start_time')]),
        ),
    ]
